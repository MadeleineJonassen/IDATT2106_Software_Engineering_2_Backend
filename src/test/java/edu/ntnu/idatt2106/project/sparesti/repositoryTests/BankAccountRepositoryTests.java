package edu.ntnu.idatt2106.project.sparesti.repositoryTests;

import edu.ntnu.idatt2106.project.sparesti.domain.entities.BankAccountEntity;
import edu.ntnu.idatt2106.project.sparesti.repositories.BankAccountRepository;
import java.util.Optional;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.ActiveProfiles;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

/**
 * Test class for BankAccountRepository. Uses Spring Boot's DataJpaTest annotation to configure
 * in-memory database tests for verifying the JpaRepository functionality specific to
 * BankAccountEntity. ActiveProfiles is used to ensure the test environment is separated from the
 * production one.
 */
@DataJpaTest
@ActiveProfiles("test")
public class BankAccountRepositoryTests {

  @Autowired private BankAccountRepository bankAccountRepository;

  /**
   * Test to ensure that saving a bank account returns the saved account with a non-null ID.
   * Validates if the repository's save operation not only persists the entity but also assigns an
   * autogenerated ID.
   */
  @Test
  public void saveBankAccountReturnsSavedAccount() {
    BankAccountEntity bankAccount = BankAccountEntity.builder().id(1L).build();

    BankAccountEntity savedBankAccount = bankAccountRepository.save(bankAccount);

    assertThat(savedBankAccount).isNotNull();
    assertThat(savedBankAccount.getId()).isNotNull();
  }

  /**
   * Test to ensure that retrieving a bank account by its ID returns the correct entity. Verifies
   * the functionality of the findById method of the repository.
   */
  @Test
  public void findBankAccountById() {
    BankAccountEntity bankAccount = BankAccountEntity.builder().id(1L).build();
    BankAccountEntity savedBankAccount = bankAccountRepository.saveAndFlush(bankAccount);
    Long savedId = savedBankAccount.getId();

    BankAccountEntity bankAccountFromRepo = bankAccountRepository.findById(savedId).orElseThrow();

    assertThat(bankAccountFromRepo.getId()).isEqualTo(savedId);
  }

  /**
   * Test to ensure that retrieving a bank account by an ID that does not exist returns an empty
   * Optional. Validates the correctness of the repository's findById method when the ID is not
   * present in the database.
   */
  @Test
  public void findBankAccountById_NotFound() {
    long nonExistentId = 999L;

    Optional<BankAccountEntity> result = bankAccountRepository.findById(nonExistentId);

    assertThat(result).isEmpty();
  }
}
